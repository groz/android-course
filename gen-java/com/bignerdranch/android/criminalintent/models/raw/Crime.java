/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bignerdranch.android.criminalintent.models.raw;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-22")
public class Crime implements org.apache.thrift.TBase<Crime, Crime._Fields>, java.io.Serializable, Cloneable, Comparable<Crime>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Crime");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SOLVED_FIELD_DESC = new org.apache.thrift.protocol.TField("solved", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SUSPECT_FIELD_DESC = new org.apache.thrift.protocol.TField("suspect", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrimeTupleSchemeFactory());
  }

  public String id; // optional
  public String title; // optional
  public long createdDate; // optional
  public boolean solved; // optional
  public String suspect; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(id);
    out.writeString(title);
    out.writeLong(createdDate);
    out.writeInt(solved ? 1 : 0);
    out.writeString(suspect);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public Crime(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.id= in.readString();
    this.title= in.readString();
    this.createdDate = in.readLong();
    this.solved = (in.readInt()==1);
    this.suspect= in.readString();
  }

  public static final android.os.Parcelable.Creator<Crime> CREATOR = new android.os.Parcelable.Creator<Crime>() {
    @Override
    public Crime[] newArray(int size) {
      return new Crime[size];
    }

    @Override
    public Crime createFromParcel(android.os.Parcel in) {
      return new Crime(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    CREATED_DATE((short)3, "createdDate"),
    SOLVED((short)4, "solved"),
    SUSPECT((short)5, "suspect");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // CREATED_DATE
          return CREATED_DATE;
        case 4: // SOLVED
          return SOLVED;
        case 5: // SUSPECT
          return SUSPECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDDATE_ISSET_ID = 0;
  private static final int __SOLVED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.CREATED_DATE,_Fields.SOLVED,_Fields.SUSPECT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "uuid")));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("createdDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "timestamp")));
    tmpMap.put(_Fields.SOLVED, new org.apache.thrift.meta_data.FieldMetaData("solved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUSPECT, new org.apache.thrift.meta_data.FieldMetaData("suspect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Crime.class, metaDataMap);
  }

  public Crime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Crime(Crime other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.createdDate = other.createdDate;
    this.solved = other.solved;
    if (other.isSetSuspect()) {
      this.suspect = other.suspect;
    }
  }

  public Crime deepCopy() {
    return new Crime(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    setCreatedDateIsSet(false);
    this.createdDate = 0;
    setSolvedIsSet(false);
    this.solved = false;
    this.suspect = null;
  }

  public String getId() {
    return this.id;
  }

  public Crime setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Crime setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public long getCreatedDate() {
    return this.createdDate;
  }

  public Crime setCreatedDate(long createdDate) {
    this.createdDate = createdDate;
    setCreatedDateIsSet(true);
    return this;
  }

  public void unsetCreatedDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDDATE_ISSET_ID);
  }

  /** Returns true if field createdDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDDATE_ISSET_ID);
  }

  public void setCreatedDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDDATE_ISSET_ID, value);
  }

  public boolean isSolved() {
    return this.solved;
  }

  public Crime setSolved(boolean solved) {
    this.solved = solved;
    setSolvedIsSet(true);
    return this;
  }

  public void unsetSolved() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOLVED_ISSET_ID);
  }

  /** Returns true if field solved is set (has been assigned a value) and false otherwise */
  public boolean isSetSolved() {
    return EncodingUtils.testBit(__isset_bitfield, __SOLVED_ISSET_ID);
  }

  public void setSolvedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOLVED_ISSET_ID, value);
  }

  public String getSuspect() {
    return this.suspect;
  }

  public Crime setSuspect(String suspect) {
    this.suspect = suspect;
    return this;
  }

  public void unsetSuspect() {
    this.suspect = null;
  }

  /** Returns true if field suspect is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspect() {
    return this.suspect != null;
  }

  public void setSuspectIsSet(boolean value) {
    if (!value) {
      this.suspect = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CREATED_DATE:
      if (value == null) {
        unsetCreatedDate();
      } else {
        setCreatedDate((Long)value);
      }
      break;

    case SOLVED:
      if (value == null) {
        unsetSolved();
      } else {
        setSolved((Boolean)value);
      }
      break;

    case SUSPECT:
      if (value == null) {
        unsetSuspect();
      } else {
        setSuspect((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case CREATED_DATE:
      return getCreatedDate();

    case SOLVED:
      return isSolved();

    case SUSPECT:
      return getSuspect();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case CREATED_DATE:
      return isSetCreatedDate();
    case SOLVED:
      return isSetSolved();
    case SUSPECT:
      return isSetSuspect();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Crime)
      return this.equals((Crime)that);
    return false;
  }

  public boolean equals(Crime that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_createdDate = true && this.isSetCreatedDate();
    boolean that_present_createdDate = true && that.isSetCreatedDate();
    if (this_present_createdDate || that_present_createdDate) {
      if (!(this_present_createdDate && that_present_createdDate))
        return false;
      if (this.createdDate != that.createdDate)
        return false;
    }

    boolean this_present_solved = true && this.isSetSolved();
    boolean that_present_solved = true && that.isSetSolved();
    if (this_present_solved || that_present_solved) {
      if (!(this_present_solved && that_present_solved))
        return false;
      if (this.solved != that.solved)
        return false;
    }

    boolean this_present_suspect = true && this.isSetSuspect();
    boolean that_present_suspect = true && that.isSetSuspect();
    if (this_present_suspect || that_present_suspect) {
      if (!(this_present_suspect && that_present_suspect))
        return false;
      if (!this.suspect.equals(that.suspect))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_createdDate = true && (isSetCreatedDate());
    list.add(present_createdDate);
    if (present_createdDate)
      list.add(createdDate);

    boolean present_solved = true && (isSetSolved());
    list.add(present_solved);
    if (present_solved)
      list.add(solved);

    boolean present_suspect = true && (isSetSuspect());
    list.add(present_suspect);
    if (present_suspect)
      list.add(suspect);

    return list.hashCode();
  }

  @Override
  public int compareTo(Crime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDate()).compareTo(other.isSetCreatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDate, other.createdDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSolved()).compareTo(other.isSetSolved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSolved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.solved, other.solved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspect()).compareTo(other.isSetSuspect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspect, other.suspect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Crime(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetCreatedDate()) {
      if (!first) sb.append(", ");
      sb.append("createdDate:");
      sb.append(this.createdDate);
      first = false;
    }
    if (isSetSolved()) {
      if (!first) sb.append(", ");
      sb.append("solved:");
      sb.append(this.solved);
      first = false;
    }
    if (isSetSuspect()) {
      if (!first) sb.append(", ");
      sb.append("suspect:");
      if (this.suspect == null) {
        sb.append("null");
      } else {
        sb.append(this.suspect);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrimeStandardSchemeFactory implements SchemeFactory {
    public CrimeStandardScheme getScheme() {
      return new CrimeStandardScheme();
    }
  }

  private static class CrimeStandardScheme extends StandardScheme<Crime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Crime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdDate = iprot.readI64();
              struct.setCreatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOLVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.solved = iprot.readBool();
              struct.setSolvedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUSPECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suspect = iprot.readString();
              struct.setSuspectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Crime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreatedDate()) {
        oprot.writeFieldBegin(CREATED_DATE_FIELD_DESC);
        oprot.writeI64(struct.createdDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSolved()) {
        oprot.writeFieldBegin(SOLVED_FIELD_DESC);
        oprot.writeBool(struct.solved);
        oprot.writeFieldEnd();
      }
      if (struct.suspect != null) {
        if (struct.isSetSuspect()) {
          oprot.writeFieldBegin(SUSPECT_FIELD_DESC);
          oprot.writeString(struct.suspect);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrimeTupleSchemeFactory implements SchemeFactory {
    public CrimeTupleScheme getScheme() {
      return new CrimeTupleScheme();
    }
  }

  private static class CrimeTupleScheme extends TupleScheme<Crime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Crime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetCreatedDate()) {
        optionals.set(2);
      }
      if (struct.isSetSolved()) {
        optionals.set(3);
      }
      if (struct.isSetSuspect()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetCreatedDate()) {
        oprot.writeI64(struct.createdDate);
      }
      if (struct.isSetSolved()) {
        oprot.writeBool(struct.solved);
      }
      if (struct.isSetSuspect()) {
        oprot.writeString(struct.suspect);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Crime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createdDate = iprot.readI64();
        struct.setCreatedDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.solved = iprot.readBool();
        struct.setSolvedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.suspect = iprot.readString();
        struct.setSuspectIsSet(true);
      }
    }
  }

}

